How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	It allows to rapidly view the last modifications made to a file and of course,
	where the bug was introduced.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	Having access to history allows to try something like a patch or a new feature
	while having a chance to rollback in case a problem occur. This makes a programmer
	more confident to try thing quickly.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Manual pros: You decide what is good to commit in a feature/bug logical sense.
	Manual cons: Done badly, it could be a mess and often forgotten.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Version system like Git is a "per functionnality" tool where a functionnality could implies multiple files. On the hand, Google Docs aims to manipulate the file only without any conceptual addition.

How can you use the commands git log and git diff to view the history of files?

    By combining git log and grep, it becomes really easy to find a commit description and its hash to compare with the previous commit with git diff.

How might using version control make you more confident to make changes that
could break something?

    With a feature like checkout, it is very easy to find when a bug was introduce and revert it.

Now that you have your workspace set up, what do you want to try using Git for?

    It would be interesting to use Git on my own project,